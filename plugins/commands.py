import asyncio
import re
import ast
import pyrogram
from pyrogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from pyrogram import Client, filters
from pyrogram.errors import FloodWait, UserIsBlocked, MessageNotModified, PeerIdInvalid
from presets import Presets
from Presets import START_TXT, HELP_TXT, ABOUT_TXT
from database.users_chats_db import db
  
@Client.on_callback_query()
async def cb_handler(client: Client, query: CallbackQuery):
    if query.data == "close_data":
        await query.message.delete()
    elif query.data == "delallconfirm":
        userid = query.from_user.id
        chat_type = query.message.chat.type

        if chat_type == "private":
            grpid  = await active_connection(str(userid))
            if grpid is not None:
                grp_id = grpid
                try:
                    chat = await client.get_chat(grpid)
                    title = chat.title
                except:
                    await query.message.edit_text("M·¥Ä·¥ã·¥á S·¥ú Ä·¥á I'·¥ç P Ä·¥ás·¥á…¥·¥õ I…¥ Y·¥è·¥ú Ä G Ä·¥è·¥ú·¥ò!!", quote=True)
                    return
            else:
                await query.message.edit_text(
                    "I·¥ç' N·¥è·¥õ C·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö T·¥è A…¥ è G Ä·¥è·¥ú·¥òs!\nC ú·¥á·¥Ñ·¥ã /connections O Ä C·¥è…¥…¥·¥á·¥Ñ·¥õ T·¥è A…¥ è G Ä·¥è·¥ú·¥òs",
                    quote=True
                )
                return

        elif chat_type in ["group", "supergroup"]:
            grp_id = query.message.chat.id
            title = query.message.chat.title

        else:
            return

        st = await client.get_chat_member(grp_id, userid)
        if (st.status == "creator") or (str(userid) in ADMINS):    
            await del_all(query.message, grp_id, title)
        else:
            await query.answer("Y·¥è·¥ú N·¥á·¥á·¥Ö T·¥è B·¥á G Ä·¥è·¥ú·¥ò O·¥°…¥·¥á Ä O Ä A…¥ A·¥ú·¥õ ú Us·¥á Ä T·¥è D·¥è T ú·¥Ä·¥õ!",show_alert=True)

    elif query.data == "delallcancel":
        userid = query.from_user.id
        chat_type = query.message.chat.type

        if chat_type == "private":
            await query.message.reply_to_message.delete()
            await query.message.delete()

        elif chat_type in ["group", "supergroup"]:
            grp_id = query.message.chat.id
            st = await client.get_chat_member(grp_id, userid)
            if (st.status == "creator") or (str(userid) in ADMINS):
                await query.message.delete()
                try:
                    await query.message.reply_to_message.delete()
                except:
                    pass
            else:
                await query.answer("T ú·¥Ä·¥õs N·¥è·¥õ F·¥è Ä Y·¥è·¥ú!!",show_alert=True)


    elif "groupcb" in query.data:
        await query.answer()

        group_id = query.data.split(":")[1]
        title = query.data.split(":")[2]
        act = query.data.split(":")[3]
        user_id = query.from_user.id

        if act == "":
            stat = "CONNECT"
            cb = "connectcb"
        else:
            stat = "DISCONNECT"
            cb = "disconnect"

        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(f"{stat}", callback_data=f"{cb}:{group_id}:{title}"),
                InlineKeyboardButton("D·¥á ü·¥á·¥õ·¥á", callback_data=f"deletecb:{group_id}")],
            [InlineKeyboardButton("B·¥Ä·¥Ñ·¥ã", callback_data="backcb")]
        ])

        await query.message.edit_text(
            f"G Ä·¥è·¥ú·¥ò N·¥Ä·¥ç·¥á : **{title}**\nG Ä·¥è·¥ú·¥ò …™·¥Ö : `{group_id}`",
            reply_markup=keyboard,
            parse_mode="md"
        )
        return

    elif "connectcb" in query.data:
        await query.answer()

        group_id = query.data.split(":")[1]
        title = query.data.split(":")[2]
        user_id = query.from_user.id

        mkact = await make_active(str(user_id), str(group_id))

        if mkact:
            await query.message.edit_text(
                f"C·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö T·¥è **{title}**",
                parse_mode="md"
            )
        else:
            await query.message.edit_text('S·¥è·¥ç·¥á E Ä Ä·¥è Ä O·¥Ñ·¥Ñ·¥ú Ä·¥á·¥Ö!!', parse_mode="md")
        return
    elif "disconnect" in query.data:
        await query.answer()

        title = query.data.split(":")[2]
        user_id = query.from_user.id

        mkinact = await make_inactive(str(user_id))

        if mkinact:
            await query.message.edit_text(
                f"D…™s·¥Ñ·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö F Ä·¥è·¥ç **{title}**",
                parse_mode="md"
            )
        else:
            await query.message.edit_text('S·¥è·¥ç·¥á E Ä Ä·¥è Ä O·¥Ñ·¥Ñ·¥ú Ä·¥á·¥Ö!!', parse_mode="md")
        return
    elif "deletecb" in query.data:
        await query.answer()

        user_id = query.from_user.id
        group_id = query.data.split(":")[1]

        delcon = await delete_connection(str(user_id), str(group_id))

        if delcon:
            await query.message.edit_text(
                "S·¥ú·¥Ñ·¥Ñ·¥áss“ì·¥ú ü ü è D·¥á ü·¥á·¥õ·¥á·¥Ö C·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥"
            )
        else:
            await query.message.edit_text('S·¥è·¥ç·¥á E Ä Ä·¥è Ä O·¥Ñ·¥Ñ·¥ú Ä·¥á·¥Ö!!', parse_mode="md")
        return
    elif query.data == "backcb":
        await query.answer()

        userid = query.from_user.id

        groupids = await all_connections(str(userid))
        if groupids is None:
            await query.message.edit_text(
                "T ú·¥á Ä·¥á A Ä·¥á N·¥è A·¥Ñ·¥õ…™·¥†·¥á C·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥s!! C·¥è…¥…¥·¥á·¥Ñ·¥õ T·¥è S·¥è·¥ç·¥á G Ä·¥è·¥ú·¥òs F…™ Äs·¥õ.",
            )
            return
        buttons = []
        for groupid in groupids:
            try:
                ttl = await client.get_chat(int(groupid))
                title = ttl.title
                active = await if_active(str(userid), str(groupid))
                act = " - ACTIVE" if active else ""
                buttons.append(
                    [
                        InlineKeyboardButton(
                            text=f"{title}{act}", callback_data=f"groupcb:{groupid}:{title}:{act}"
                        )
                    ]
                )
            except:
                pass
        if buttons:
            await query.message.edit_text(
                "Y·¥è·¥ú Ä C·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö G Ä·¥è·¥ú·¥ò D·¥á·¥õ·¥Ä…™ üs ;\n\n",
                reply_markup=InlineKeyboardMarkup(buttons)
            )

    elif "alertmessage" in query.data:
        grp_id = query.message.chat.id
        i = query.data.split(":")[1]
        keyword = query.data.split(":")[2]
        reply_text, btn, alerts, fileid = await find_filter(grp_id, keyword)
        if alerts is not None:
            alerts = ast.literal_eval(alerts)
            alert = alerts[int(i)]
            alert = alert.replace("\\n", "\n").replace("\\t", "\t")
            await query.answer(alert,show_alert=True)

    if query.data.startswith("file"):
        ident, file_id = query.data.split("#")
        files = (await get_file_details(file_id))[0]
        title = files.file_name
        size=get_size(files.file_size)
        f_caption=files.caption
        if CUSTOM_FILE_CAPTION:
            try:
                f_caption=CUSTOM_FILE_CAPTION.format(file_name=title, file_size=size, file_caption=f_caption)
            except Exception as e:
                print(e)
            f_caption=f_caption
        if f_caption is None:
            f_caption = f"{files.file_name}"
            
        try:
            if AUTH_CHANNEL and not await is_subscribed(client, query):
                await query.answer(url=f"https://t.me/{temp.U_NAME}?start={file_id}")
                return
            else:
                await client.send_cached_media(
                    chat_id=query.from_user.id,
                    file_id=file_id,
                    caption=f_caption
                    )
                await query.answer('C ú·¥á·¥Ñ·¥ã P·¥ç, I H·¥Ä·¥†·¥á S·¥á…¥·¥õ F…™ ü·¥ás I…¥ P·¥ç',show_alert = True)
        except UserIsBlocked:
            await query.answer('U…¥ ô ü·¥è·¥Ñ·¥ã T ú·¥á B·¥è·¥õ M·¥Ä ú…¥ !',show_alert = True)
        except PeerIdInvalid:
            await query.answer(url=f"https://t.me/{temp.U_NAME}?start={file_id}")
        except Exception as e:
            await query.answer(url=f"https://t.me/{temp.U_NAME}?start={file_id}")

    elif query.data.startswith("checksub"):
        if AUTH_CHANNEL and not await is_subscribed(client, query):
            await query.answer("I L…™·¥ã·¥á Y·¥è·¥ú Ä S·¥ç·¥Ä Ä·¥õ…¥·¥áss, B·¥ú·¥õ D·¥è…¥'·¥õ B·¥á O·¥†·¥á Äs·¥ç·¥Ä Ä·¥õ üòí",show_alert=True)
            return
        ident, file_id = query.data.split("#")
        files = (await get_file_details(file_id))[0]
        title = files.file_name
        size=get_size(files.file_size)
        f_caption=files.caption
        if CUSTOM_FILE_CAPTION:
            try:
                f_caption=CUSTOM_FILE_CAPTION.format(file_name=title, file_size=size, file_caption=f_caption)
            except Exception as e:
                print(e)
                f_caption=f_caption
        if f_caption is None:
            f_caption = f"{title}"
        await query.answer()
        await client.send_cached_media(
            chat_id=query.from_user.id,
            file_id=file_id,
            caption=f_caption
            )

    elif query.data == "pages":
        await query.answer()
    elif query.data == "start":
        buttons = [[
            InlineKeyboardButton('‚ûï A·¥Ö·¥Ö M·¥á T·¥è Y·¥è·¥ú Ä G Ä·¥è·¥ú·¥òs ‚ûï', url='http://t.me/OB_ANYFILTERBOT?startgroup=true')
            ],[
            InlineKeyboardButton('üîç S·¥á·¥Ä Ä·¥Ñ ú', switch_inline_query_current_chat=''),
            InlineKeyboardButton('ü§ñ U·¥ò·¥Ö·¥Ä·¥õ·¥ás', url='https://t.me/OB_LINKS')
            ],[
            InlineKeyboardButton('‚ÑπÔ∏è H·¥á ü·¥ò', callback_data='help'),
            InlineKeyboardButton('üòä A ô·¥è·¥ú·¥õ', callback_data='about')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=Presets.START_TXT.format(query.from_user.mention),
            reply_markup=reply_markup,
            parse_mode='html'
        )
    elif query.data == "help":
        buttons = [[
            InlineKeyboardButton('M·¥Ä…¥·¥ú·¥á ü F…™ ü·¥õ·¥á Ä', callback_data='manuelfilter'),
            InlineKeyboardButton('A·¥ú·¥õ·¥è F…™ ü·¥õ·¥á Ä', callback_data='autofilter')
            ],[
            InlineKeyboardButton('C·¥è…¥…¥·¥á·¥Ñ·¥õ…™·¥è…¥', callback_data='coct'),
            InlineKeyboardButton('Ex·¥õ Ä·¥Ä M·¥è·¥Ös', callback_data='extra')
            ],[
            InlineKeyboardButton('üè† H·¥è·¥ç·¥á', callback_data='start'),
            InlineKeyboardButton('üîÆ S·¥õ·¥Ä·¥õ·¥ús', callback_data='stats')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=Presets.HELP_TXT.format(query.from_user.mention),
            reply_markup=reply_markup,
            parse_mode='html'
        )
    elif query.data == "about":
        buttons= [[
            InlineKeyboardButton('ü§ñ U·¥ò·¥Ö·¥Ä·¥õ·¥ás', url='https://t.me/OB_LINKS'),
            InlineKeyboardButton('‚ô•Ô∏è S·¥è·¥ú Ä·¥Ñ·¥á', callback_data='source')
            ],[
            InlineKeyboardButton('üè† H·¥è·¥ç·¥á', callback_data='start'),
            InlineKeyboardButton('üîê C ü·¥ès·¥á', callback_data='close_data')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=Presets.ABOUT_TXT,
            reply_markup=reply_markup,
            parse_mode='html'
        )
    elif query.data == "source":
        buttons = [[
            InlineKeyboardButton('üë©‚Äçü¶Ø B·¥Ä·¥Ñ·¥ã', callback_data='about')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.SOURCE_TXT,
            reply_markup=reply_markup,
            parse_mode='html'
        )
    elif query.data == "manuelfilter":
        buttons = [[
            InlineKeyboardButton('üë©‚Äçü¶Ø B·¥Ä·¥Ñ·¥ã', callback_data='help'),
            InlineKeyboardButton('‚èπÔ∏è B·¥ú·¥õ·¥õ·¥è…¥s', callback_data='button')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.MANUELFILTER_TXT,
            reply_markup=reply_markup,
            parse_mode='html'
        )
    elif query.data == "button":
        buttons = [[
            InlineKeyboardButton('üë©‚Äçü¶Ø B·¥Ä·¥Ñ·¥ã', callback_data='manuelfilter')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.BUTTON_TXT,
            reply_markup=reply_markup,
            parse_mode='html'
        )
    elif query.data == "autofilter":
        buttons = [[
            InlineKeyboardButton('üë©‚Äçü¶Ø B·¥Ä·¥Ñ·¥ã', callback_data='help')
        ]]
        reply_markup = InlineKeyboardMarkup(buttons)
        await query.message.edit_text(
            text=script.AUTOFILTER_TXT,
            reply_markup=reply_markup,
            parse_mode='html'
        )
